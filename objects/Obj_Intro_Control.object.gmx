<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = Spr_Fade_Black;
image_speed = 1;

show_version = false;           //wheather to draw emerald version or not
show_background = false;        // wheather to draw the animated background
background = Spr_Background_1;  // sets background image
background_image_index = 0;     // start background image with image_index 0
reverse = false;
alpha = 1;                      // alpha of start
alpha2 = 0;                     // emerald version alpha
alpha3 = 1                      // background alpha
alpha4 = 0;                     // white fade
yy = 0;                         // emerald version position
skip = false;                   // variable for skipping title intro
skipped = false;                // turns true when player skipped title
next = false;                   // permission to go to the next room
next_room = false;              // go to next room or not

fade = false;                   // when fade is true &gt; Spr_Start will fade
alarm[0] = 150;                 // fade of Spr_Start
alarm[1] = 170;                 // start Title animation
alarm[2] = 385;                 // get background
alarm[3] = 3240;                // restarts room
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if audio_is_playing(Snd_Intro) {
 audio_stop_sound(Snd_Intro)
}
room_goto(gameStart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_stop_all();
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if skipped = false {
 // show background
 show_background = true;
 background_image_index = 0;
 skip = false;
 skipped = true;
 next = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// sets next sprite index
fade = false;
sprite_index = Spr_Title_1;
alpha = 1;
skip = true;                        // permission to skip validated

audio_play_sound(Snd_Intro,1,false);
 audio_sound_gain(Snd_Intro, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// enables fade
fade = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if fade = true &amp;&amp; alpha != 0 {
 alpha -= .1;
}

// TITLE ANIMATION
if sprite_index = Spr_Title_1 &amp;&amp; image_index = 11 {
 image_index = 0;
 sprite_index = Spr_Title_2;
}
if sprite_index = Spr_Title_2 &amp;&amp; image_index = 34 {
 image_index = 0;
 sprite_index = Spr_Title_3;
}
if sprite_index = Spr_Title_3 &amp;&amp; image_index = 20 {
 image_index = 0;
 sprite_index = Spr_Title_4;
}
if sprite_index = Spr_Title_4 &amp;&amp; image_index = 22 {
 image_index = 0;
 sprite_index = Spr_Title_5;
}
if sprite_index = Spr_Title_5 &amp;&amp; image_index = 25 {
 image_index = 0;
 sprite_index = Spr_Title_6;
}
// MOVES TITLE UP A BIT
if sprite_index = Spr_Title_6 &amp;&amp; image_index = 27 {
 image_speed = 0;
 move_towards_point(0,-128,3);
}
if y &lt;= -128 {
 speed = 0;
}
// SHOW EMERALD VERSION
if y &lt;= -64 {
 show_version = true;
 if alpha2 != 1 {
  alpha2 += .05
 }
 if !(yy &gt;= 64) {
  yy += 3
 }
}

// SHOW BACKGROUND AND ANIMATION
if show_background = true {
  if reverse = true {
  p = -1
 } else {
  p = 1;
 }
 background_image_index += 1*p;
}

if reverse = false {
 if background = Spr_Background_1 &amp;&amp; background_image_index = 45 {
  background = Spr_Background_2;
  background_image_index = 0;
 }
 if background = Spr_Background_2 &amp;&amp; background_image_index = 46 {
  background = Spr_Background_3;
  background_image_index = 0;
 }
 if background = Spr_Background_3 &amp;&amp; background_image_index = 46 {
  background = Spr_Background_4;
  background_image_index = 0;
 }
 if background = Spr_Background_4 &amp;&amp; background_image_index = 32 {
  reverse = true;
 }
}
if reverse = true {
 if background = Spr_Background_4 &amp;&amp; background_image_index = 0 {
  background = Spr_Background_3;
  background_image_index = 46;
 }
 if background = Spr_Background_3 &amp;&amp; background_image_index = 0 {
  background = Spr_Background_2;
  background_image_index = 46;
 }
 if background = Spr_Background_2 &amp;&amp; background_image_index = 0 {
  background = Spr_Background_1;
  background_image_index = 45;
 }
 if background = Spr_Background_1 &amp;&amp; background_image_index = 0 {
  reverse = false;
 }
}

// FADES EVERYTHING WHEN ROOM RESTARTS

if alarm[3] &lt;= 40 {
 alpha  -= .025;
 alpha2 -= .025;
 alpha3 -= .025;
}
if next_room = true {
 alpha4  += .05;
}

if skip = true {
 if (keyboard_check_released(ord('Z')) or keyboard_check_released(ord('X'))) &amp;&amp; !(alarm[3] &lt;= 40) {
  show_background = true;
  show_version = true;
  y = -128;
  yy = 64;
  alpha2 = 1;
  sprite_index = Spr_Title_6;
  image_index = 27;
  image_speed = 0;
  skip = false;
  skipped = true;
  next = true;
 }
}

if next = true {
 if keyboard_check_pressed(ord('Z')) or keyboard_check_pressed(vk_enter) {
  alarm[4] = 20;
  next_room = true;
 }
}
if next_room = true {
 audio_sound_gain(Snd_Intro, 0, 666);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// draws background
if show_background = true {
 draw_sprite_ext(background,background_image_index,0,0,1,1,0,c_white,alpha3);
}

// draws title
draw_sprite_ext(sprite_index,image_index,x,y,1,1,0,c_white,alpha);

// draws emerald version
if show_version = true {
 draw_sprite_ext(Spr_Emerald_Version,image_index,x,yy-64,1,1,0,c_white,alpha2);
}

draw_sprite_ext(Spr_Fade_White,image_index,0,0,1,1,0,c_white,alpha4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
