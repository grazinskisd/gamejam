<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_ash_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize variables for the object
direction = 90;
life = 100;

image_centre_x = x + 16;
image_centre_y = y + 16;

target_distance = 24;

target_x = image_centre_x + (target_distance * cos(degtorad(direction)));
target_y = image_centre_y - (target_distance * sin(degtorad(direction)));

target_instance = instance_create(target_x, target_y, ob_target);

//gunz
picked_up = false;  //picked up gun?
cooldown = 0;



// initial values
b_lifespan = 30;
b_damage = 10;
b_reload_time = 5;
b_cooldown_time = 2;  //shooting rate
b_bullet_spread = 7; //angle of bullet spread
b_cooldown = 0;

//explosive pokeballs
pokeballs = 10;
p_cooldown = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>some values at start of step</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_centre_x = x + 12;
image_centre_y = y + 16;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movement</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x, y, goToPlayfield) {
    room_goto(playfield_1);
}

// gta2 movement
step_size = 5;
def_image_speed = 0.3;
rotation_step = 5;

up_pressed = keyboard_check(vk_up);
down_pressed = keyboard_check(vk_down);
left_pressed = keyboard_check(vk_left);
right_pressed = keyboard_check(vk_right);

up_collision = place_meeting(x, y-sprite_height, ob_collidable);
down_collision = place_meeting(x, y+sprite_width, ob_collidable);
left_collision = place_meeting(x-sprite_width, y, ob_collidable);
right_collision = place_meeting(x+sprite_width, y, ob_collidable);


// handle direction increment andoverflow
if (left_pressed){
    direction = (direction + rotation_step) mod 360;
}

if (right_pressed){
    direction = ((360 - rotation_step) + direction) mod 360;
}

// handle sprite draw depending on direction
if (direction &lt;= 45 or direction &gt; 315){
    sprite_index = sp_ash_right;
}
if (direction &lt;= 135 and direction &gt; 45){
    sprite_index = sp_ash_up;
}
if (direction &lt;= 225 and direction &gt; 135){
    sprite_index = sp_ash_left;
}
if (direction &lt;= 315 and direction &gt; 225){
    sprite_index = sp_ash_down;
}

// movement towards direction
if(up_pressed){
    speed = step_size;
    image_speed = def_image_speed;
}else if (down_pressed){
    speed = -step_size;
    image_speed = def_image_speed;
}else{
    speed = 0;
    image_speed = 0;
    image_index = 0;
}

//collision detection

towards_x = image_centre_x + (step_size * cos(degtorad(direction)));
towards_y = image_centre_y - (step_size * sin(degtorad(direction)));

if (position_meeting(towards_x, towards_y, ob_collidable)){
    speed = 0;
    image_speed = 0;
    image_index = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Target placement

//image_centre_x = x + (sprite_width/2);
//image_centre_y = y + (sprite_height/2);

image_centre_x = x + 12;
image_centre_y = y + 16;

target_x = image_centre_x + (target_distance * cos(degtorad(direction)));
target_y = image_centre_y - (target_distance * sin(degtorad(direction)));

target_instance.x = target_x;
target_instance.y =  target_y;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>firing</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if (keyboard_check(ord('F'))){
//    bullet_instance = instance_create(image_centre_x, image_centre_y, ob_bullet_simple);
//    bullet_instance.direction = direction;
//}

if(keyboard_check(ord('F')) and b_cooldown = 0 and picked_up){
    if(not audio_is_playing(shoot_soundz))
        audio_play_sound(shoot_soundz, 1, 0);
    bullet = instance_create(image_centre_x, image_centre_y, ob_bullet);
    // initial values
    bullet.lfespan = b_lifespan;
    bullet.damage = b_damage;
    bullet.reload_time = b_reload_time;
    bullet.cooldown_time = b_cooldown_time;
    bullet.bullet_spread = b_bullet_spread;
    spread = irandom(b_bullet_spread*2) - b_bullet_spread;
    bullet.direction = direction + spread;
    b_cooldown = b_cooldown_time;
}

if(keyboard_check_released(ord('F')) and picked_up){
    audio_stop_sound(shoot_soundz);
}

if(keyboard_check(ord('G')) and p_cooldown = 0 and pokeballs &gt; 0){
    //if(not audio_is_playing(shoot_soundz))
    //    audio_play_sound(shoot_soundz, 1, 0);
    pokeball = instance_create(image_centre_x, image_centre_y, ob_pokeball);
    pokeball.direction = direction;
    pokeball.speed = 7;
    p_cooldown = 50;
    pokeballs--;
}

if(b_cooldown &gt; 0){
    b_cooldown--;
}

if(p_cooldown &gt; 0){
    p_cooldown--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>death</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// die
if(life &lt;= 0){
    rand_sound = irandom(6);
    switch(rand_sound){
        case(1):
            audio_play_sound(snd_blood_1, 1, 0);
            break;
        case(2):
            audio_play_sound(snd_blood_2, 1, 0);
            break;
        case(3):
            audio_play_sound(snd_blood_3, 1, 0);
            break;
        case(4):
            audio_play_sound(snd_blood_4, 1, 0);
            break;
        case(5):
            audio_play_sound(snd_blood_5, 1, 0);
            break;
        case(6):
            audio_play_sound(snd_death_scream, 1, 0);
            break;
    }

    image_centre_x = x + sprite_width/2;
    image_centre_y = y + sprite_height/2;
    
    part_system_depth(global.ParticleSystem, depth+1);
    part_particles_create(global.ParticleSystem, image_centre_x, image_centre_y, global.blood_splat, 40);
    instance_destroy();
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>end</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(not instance_exists(ob_minion)){
    room_goto(room_end);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_scratch">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>life -= other.damage;
other.damage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_uzi">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
shoot_soundz = snd_uzi_shoot;
picked_up = true;

// uzi values
b_lifespan = 30;
b_damage = 10;
b_reload_time = 5;
b_cooldown_time = 2;  //shooting rate
b_bullet_spread = 7; //angle of bullet spread
b_cooldown = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
